Sun Jul 14 2015  Patrik Wenger  <paddor@gmail.com>
	* chunk.c chunk.h decryption.c decryption.h encryption.c encryption.h
	key.c key.h util.c util.h round_trip.c: Make use of err(), warn() and
	friends from err.h. Also exit with meaningful codes from sysexits.h.

	* key.h key.c (key_malloc): Change return type to void. Exit with
	meaningful code if allocation failed. Callers changed.

Sun Jul 13 2015  Patrik Wenger  <paddor@gmail.com>
	* key.h (uint8_t *key): Eliminate global variable key. Make it local
	in the respective main().
	* key.h (key_malloc): Take a pointer to store the pointer in, just
	like chunk_malloc(). Callers changed.

	* crypto_box.h (KEY_BYTES): Macro removed.
	* key.h (KEY_BYTES): Macro defined.

	* crypto_box.h (DEBUG_ONLY, hexDump): Macro and function removed.

	* key.h (KEY_BYTES): Macro removed. Users changed.

	* crypto_box.h (NONCE_BYTES): Macro removed. Users changed.

	* crypto_box.h (MAC_BYTES): Macro removed. Users changed.

	* crypto_box.h crypto_box.c (crypto_box_init, open_input, close_input)
	(sodium_increment): Removed.
	* util.h util.c (crypto_box_init, open_input, close_input)
	(sodium_increment): Added.

	* crypto_box.h crypto_box.c <argument parsing stuff>: Removed.
	* arguments.h arguments.c <argument parsing stuff>: Added.

	* chunk.h chunk.c encryption.h encryption.c decryption.h decryption.c
	round_trip.c: Remove arguments stuff. It only belongs into
	lock_box.[ch] and open_box.[ch]. Callers changed.

	* arguments.c (parse_options): Make use of argp_error().

Sun Jul 12 2015  Patrik Wenger  <paddor@gmail.com>
	* crypto_box.c (lock_box): Extract reading of a PT chunk to
	read_pt_chunk().
	* crypto_box.c (read_pt_chunk): Defined.

	* crypto_box.c (verify_ct_chunk): Security fix: Change `sizeof
	subkey`, which is just the pointer size, to
	crypto_onetimeauth_KEYBYTES.

	* crypto_box.c (verify_ct_chunk): Remove auth_state parameter and
	declare it within the function body. Callers changed.

	* crypto_box.c (print_nonce): Pass nonce parameter as const (not only
	const pointer).

	* crypto_box.c (lock_box): Extract construction of CT MAC to
	construct_chunk_mac().
	* crypto_box.c (construct_chunk_mac): Defined.

	* crypto_box.c (verify_ct_chunk): Rename to verify_chunk().

	* crypto_box.c (read_pt_chunk): Remove unused hex_buf parameter.
	Caller changed.

	* crypto_box.c (lock_box): Extract printing of CT chunk to
	print_ct_chunk().
	* crypto_box.c (print_ct_chunk): Defined.

	* crypto_box.c (lock_box): Extract processing of one chunk to
	encrypt_next_chunk().
	* crypto_box.c (encrypt_next_chunk): Defined.

	* crypto_box.c (encrypt_next_chunk, decrypt_next_chunk): Security fix:
	Change `sizeof nonce`, which is just the pointer size, to NONCE_BYTES.

	* crypto_box.h (init_chunk): Return type was void, now int. Parameter
	chunk is now a pointer to a pointer. Callers changed.
	* crypto_box.h (free_chunk): Pass pointer to chunk as const.
	* crypto_box.c (lock_box, open_box): Make passing around chunk easier
	and cleanup safely (even if chunk hasn't been initialized).

	* crypto_box.h (auth_subkey_malloc): Change signature to behave like
	init_chunk() and hex_ct_malloc(). Callers changed.

	* crypto_box.h (init_chunk, free_chunk): Rename to chunk_malloc() and
	chunk_free(). Definitions and callers changed.

	* crypto_box.c (read_ct_chunk, write_ct_chunk): Handle empty plaintext
	nicely.

	* crypto_box.h: Split up to multiple files: chunk.h, key.h,
	encryption.h, decryption.h.
	* crypto_box.c: Split up to multiple files: chunk.c, key.c,
	encryption.c, decryption.c.

	* chunk.h (struct chunk): Add members subkey and hex_buf. Users
	changed.
	* decryption.c (read_ct_chunk): Removed parameter subkey.
	* decryption.c (verify_chunk): Removed parameter subkey.
	* decryption.c (decrypt_next_chunk): Removed parameters hex_buf and
	subkey.
	* encryption.c (construct_chunk_mac): Removed parameter subkey.
	* encryption.c (print_ct_chunk): Removed parameter hex_buf.
	* encryption.c (encrypt_next_chunk): Removed parameters hex_buf and
	subkey.

	* chunk.c key.c encryption.c decryption.c: Make all functions that
	don't need to be exposed static.

	* chunk.h (determine_chunk_type): Declaration removed.
	* chunk.h (determine_pt_chunk_type, determine_ct_chunk_type):
	Declared.
	* chunk.c (determine_pt_chunk_type, determine_ct_chunk_type): Defined.
	* encryption.c (encrypt_next_chunk): Changed.
	* decryption.c (decrypt_next_chunk): Changed.

Sun Jul 11 2015  Patrik Wenger  <paddor@gmail.com>
	* lock_box.c open_box.c (main): Extract sodium initialization.
	* crypto_box.h (crypto_box_init): Declared.
	* crypto_box.c (crypto_box_init): Defined.

	* crypto_box.c (lock_box, open_box) <hex CT malloc>: Extract hex
	ciphertext memory allocation.
	* crypto_box.h (hex_ct_malloc): Declared.
	* crypto_box.c (hex_ct_malloc): Defined.

	* crypto_box.c (open_box): Extract reading of nonce to read_nonce().
	* crypto_box.c (read_nonce): Defined.

	* crypto_box.c (open_box): Extract reading of a CT chunk to
	read_ct_chunk().
	* crypto_box.c (read_ct_chunk): Defined.

	* crypto_box.c (read_nonce): Solely depend on hex_buf parameter to
	determine if CT is hex or not.

	* crypto_box.c (open_box): Extract verification of chunk to
	verify_ct_chunk().
	* crypto_box.c (verify_ct_chunk): Defined.

	* crypto_box.c (open_box): Extract decryption of chunk to
	decrypt_chunk().
	* crypto_box.c (decrypt_chunk): Defined.

	* crypto_box.c (open_box): Extract checking of chunk type to
	check_chunk_type().
	* crypto_box.c (check_chunk_type): Defined.

	* crypto_box.c (open_box): Extract writing of PT chunk to
	write_pt_chunk().
	* crypto_box.c (write_pt_chunk): Defined.

	* crypto_box.c (lock_box, open_box): Initialize hex_buf to NULL and
	sodium_free() unconditionally.

	* crypto_box.c (open_box): Extract processing of one chunk to
	decrypt_next_chunk().
	* crypto_box.c (decrypt_next_chunk): Defined.

	* crypto_box.h (struct chunk): _Bool is_first_chunk added. Users
	changed.

	* crypto_box.c (decrypt_chunk): Inline it directly in
	decrypt_next_chunk().

	* crypto_box.c (lock_box): Simplify error handling here as well. Only
	one label ("abort"). Initialize hex_buf and subkey to NULL and then
	sodium_free() unconditionally.

	* crypto_box.c (lock_box): Extract printing nonce to print_nonce().
	* crypto_box.c (print_nonce): Defined.

Sun Jul 10 2015  Patrik Wenger  <paddor@gmail.com>
	* crypto_box.h (CHUNK_CT_BYTES): Declare as unsigned long.

	* crypto_box.c (lock_box, open_box): Optimize conversion to and from
	hex. Convert whole chunks using sodium_hex2bin() and sodium_bin2hex().
	Further simplify cleanup (free()ing) using different labels and goto.

Sun Jul 9 2015  Patrik Wenger  <paddor@gmail.com>
	* crypto_box.c lock_box.c open_box.c: Use K&R style function
	definitions.

	* crypto_box.c (get_key) <case CMD>: Zero out key in command line
	argument after reading it.

	* crypto_box.c (lock_box, open_box) [arguments.ct_format==HEX]:
	Write/read nonce and chunks in hex.

	* crypto_box.c (lock_box) <if (isatty(...))>: Issue warning only if
	ciphertext would be binary.

Sun Jul 8 2015  Patrik Wenger  <paddor@gmail.com>
	* crypto_box.h (determine_chunk_type): Declared.
	* crypto_box.c (determine_chunk_type): Defined.
	* lock_box.c (lock_box): Use determine_chunk_type().
	* open_box.c (open_box): Use determine_chunk_type().

	* crypto_box.h (FIRST_CHUNK, LAST_CHUNK): New values (int based, not
	"flag" based")

	* lock_box.h open_box.h: Removed.
	* crypto_box.h (lock_box, open_box): Moved declarations here.
	* lock_box.c (lock_box): Removed.
	* open_box.c (open_box): Removed.
	* crypto_box.c (lock_box, open_box): Moved definitions here.
	* crypto_box.c (lock_box, open_box): Moved definitions here.

Sun Jul 7 2015  Patrik Wenger  <paddor@gmail.com>
	* lock_box.h (lock_box): New header file.
	* open_box.h (open_box): New header file.

	* lock_box.c open_box.c (lock_box, open_box): Extract
	authentication subkey allocation to auth_subkey_malloc().
	* crypto_box.h (auth_subkey_malloc): Declared.
	* crypto_box.c (auth_subkey_malloc): Defined.

	* crypto_box.h <struct chunk chunk>: Removed.
	* lock_box.c (lock_box): Local variable chunk added.
	* open_box.c (open_box): Local variable chunk added.

	* crypto_box.h <uint8 nonce[]>: Removed.
	* lock_box.c (lock_box): Local variable nonce added.
	* open_box.c (open_box): Local variable nonce added.

	* crypto_box.h <uint8 key[KEY_BYTES]>: Change type to *key.
	* crypto_box.h (key_mlock)>: Declaration removed.
	* crypto_box.c (key_mlock, key_munlock): Removed.
	* crypto_box.h (key_malloc)>: Declaration added.
	* crypto_box.c (key_malloc, key_free): Definitions added.
	* lock_box.c open_box.c (main): Initialize key with key_malloc(). This
	way, the memory for the key is not only locked and zeroed-out later,
	but also protected by canaries.

Sun Jul 5 2015  Patrik Wenger  <paddor@gmail.com>
	* lock_box.c (lock_box) <compute MAC>: Fix condition to find out if
	it's the first chunk. Use is_first_chunk instead of
	chunk_type!=FIRST_CHUNK.

Thu Jul 2 2015  Patrik Wenger  <paddor@gmail.com>
	* crypto_box.h (#include <stdbool.h>): Added.
	* crypto_box.h (struct ciphertext): Renamed to struct chunk.
	* crypto_box.h (FIRST_CHUNK, LAST_CHUNK): Macros defined.
	* crypto_box.h (INITIAL_CT_SIZE): Macros removed.
	* crypto_box.h (CT_AFTER_MAC): Macro renamed to CHUNK_CT.
	* crypto_box.h (other macros): Adapted/renamed to CHUNK_*.
	* crypto_box.h (init_ct): Renamed to init_chunk() along with
	definition. Callers changed.
	* crypto_box.h (grow_ct): Removed along with definition.
	* crypto_box.h (free_ct): Renamed to free_chunk() along with
	definiton. Callers changed.
	* crypto_box.h (sodium_increment): Declared.
	* crypto_box.c (init_ct): Renamed to init_chunk(). It malloc()s a
	fixed amount of memory now (CHUNK_CT_BYTES, 256 KiB).
	* crypto_box.c (grow_ct): Removed.
	* crypto_box.c (sodium_increment): Defined.
	* lock_box.c (lock_box): Changed to new chunking design (without MAC
	of MACs).
	* open_box.c (open_box): Changed to new chunking design (without MAC
	of MACs).

Sun Jun 30 2015  Patrik Wenger  <paddor@gmail.com>

	* crypto_box.h (struct arguments) <input_source, input_file>: Added.
	* crypto_box.c (options[]): Option -f/--file added.
	* crypto_box.c (parse_options) <case 'f', ARGP_KEY_SUCCESS>: Added.
	* crypto_box.c (get_key_from_args): Renamed to get_key_from_str().
	Parameter arg renamed to str.
	* crypto_box.c (read_line): Defined.
	* crypto_box.c (HEX_KEY_MAXLEN): Macro defined.
	* crypto_box.h (open_input, close_input): Declared.
	* crypto_box.c (open_input, close_input): Defined.
	* seal_box.c open_box.c (main):
	  - Initialize arguments.input_source.
	  - Use open_input() and close_input().

	* seal_box.c: Renamed to lock_box.c.

	* crypto_box.h (extern struct argp argp): Rename to argp_parser.
	Initialization and callers adapted.

	* crypto_box.h (struct arguments arguments): Declared.
	* crypto_box.c (struct arguments arguments): Initialized with default
	values.
	* lock_box.c open_box.c (main) <struct arguments arguments>: Removed
	local declaration.
	* crypto_box.c (parse_options) <case ARGP_KEY_SUCCESS>
	[key_source==CMD && key==NULL]: Inform about missing key argument and
	exit.

	* crypto_box.h (READ_BYTES): Macro removed.
	* crypto_box.h (CHUNK_BYTES): Macro defined.
	* lock_box.c (read_plaintext, encrypt_then_mac, write_ciphertext)
	(get_nonce): Removed.
	* open_box.c (read_ciphertext, verify_then_decrypt, write_plaintext):
	Removed.
	* lock_box.c (lock_box): Defined.
	* open_box.c (open_box): Defined.
	* lock_box.c open_box.c (main): Changed.

Sun Jun 29 2015  Patrik Wenger  <paddor@gmail.com>

	* crypto_box.h (ct_t): Remove typedef. Now it's struct ciphertext. *_t
	types are reserved for C standards. Declarations and definitions
	adapted.

Sun Jun 28 2015  Patrik Wenger  <paddor@gmail.com>

	* crypto_box.h (parse_options, get_key_from_file)
	    (get_key_from_args): Declarations removed.

	* crypto_box.c (get_key_from_args) [invalid]: Warn and abort.

	* crypto_box.h (key_mlock): Declared.
	* crypto_box.c (key_mlock, key_munlock): Defined.
	* seal_box.c open_box.c (main): Call key_mlock().

	* seal_box.c (write_ciphertext) [isatty]: Warn.

Fri Jun 26 2015  Patrik Wenger  <paddor@gmail.com>

	* crypto_box.h (struct arguments) <key_source>: KEY_FILE added.
	* crypto_box.h (struct arguments) <key_file>: Added.
	* crypto_box.h (get_key_from_file): Declared.
	* crypto_box.c (options[]): Option -k/--key-file added.
	* crypto_box.c (parse_options) <case 'k'>: Added.
	* crypto_box.c (get_key) <case KEY_FILE>: Added.
	* crypto_box.c (get_key_from_file): Defined.

Wed Jun 25 2015  Patrik Wenger  <paddor@gmail.com>

	* crypto_box.h: Include "config.h" and <argp.h>.
	* crypto_box.h crypto_box.c seal_box.c open_box.c: Switch to ARGP for
	command line arguments processing. Now we have long options and stuff
	like --help and --version for free!

Wed Jun 24 2015  Patrik Wenger  <paddor@gmail.com>

	* crypto_box.c crypto_box.h: Refactor.
	* seal_box.c open_box.c: New file names (were: crypto_box.c,
	crypto_open.c).
